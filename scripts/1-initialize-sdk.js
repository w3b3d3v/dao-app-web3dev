import { ThirdwebSDK } from "@thirdweb-dev/sdk";
import ethers from "ethers";

//Importando e configurando nosso arquivo .env para que possamos usar nossas variÃ¡veis de ambiente de maneira segura
import dotenv from "dotenv";
dotenv.config();

// Algumas verificaÃ§Ãµes rÃ¡pidas para ter certeza de que nosso .env estÃ¡ funcionando.
if (!process.env.PRIVATE_KEY || process.env.PRIVATE_KEY == "") {
    console.log("ðŸ›‘ Chave privada nÃ£o encontrada.")
}

if (!process.env.ALCHEMY_API_URL || process.env.ALCHEMY_API_URL == "") {
    console.log("ðŸ›‘ Alchemy API nÃ£o encontrada.")
}

if (!process.env.WALLET_ADDRESS || process.env.WALLET_ADDRESS == "") {
    console.log("ðŸ›‘ EndereÃ§o de carteira nÃ£o encontrado.")
}

// RPC URL, nÃ³s usaremos nossa URL da API do Alchemy do nosso arquivo .env.
const provider = new ethers.providers.JsonRpcProvider(process.env.ALCHEMY_API_URL);

// A chave privada da nossa carteira. SEMPRE MANTENHA ISSO PRIVADO, NÃƒO COMPARTILHE COM NINGUÃ‰M, adicione no seu arquivo .env e NÃƒO comite aquele arquivo para o github!
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
const sdk = new ThirdwebSDK(wallet);

(async () => {
    try {
        const address = await sdk.getSigner().getAddress();
        console.log("ðŸ‘‹ SDK inicializado pelo endereÃ§o:", address)
    } catch (err) {
        console.error("Falha ao buscar apps no sdk", err);
        process.exit(1);
    }
})()

// NÃ³s estamos exportando o SDK thirdweb inicializado para que possamos usar em outros scprits do projeto
export default sdk;